// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/cloud/automl/v1beta1/table_spec.proto

package automl

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A specification of a relational table.
// The table's schema is represented via its child column specs. It is
// pre-populated as part of ImportData by schema inference algorithm, the
// version of which is a required parameter of ImportData InputConfig.
// Note: While working with a table, at times the schema may be
// inconsistent with the data in the table (e.g. string in a FLOAT64 column).
// The consistency validation is done upon creation of a model.
// Used by:
//   *   Tables
type TableSpec struct {
	// Output only. The resource name of the table spec.
	// Form:
	//
	// `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/tableSpecs/{table_spec_id}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// column_spec_id of the time column. Only used if the parent dataset's
	// ml_use_column_spec_id is not set. Used to split rows into TRAIN, VALIDATE
	// and TEST sets such that oldest rows go to TRAIN set, newest to TEST, and
	// those in between to VALIDATE.
	// Required type: TIMESTAMP.
	// If both this column and ml_use_column are not set, then ML use of all rows
	// will be assigned by AutoML. NOTE: Updates of this field will instantly
	// affect any other users concurrently working with the dataset.
	TimeColumnSpecId string `protobuf:"bytes,2,opt,name=time_column_spec_id,json=timeColumnSpecId,proto3" json:"time_column_spec_id,omitempty"`
	// Output only. The number of rows (i.e. examples) in the table.
	RowCount int64 `protobuf:"varint,3,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
	// Output only. The number of columns of the table. That is, the number of
	// child ColumnSpec-s.
	ColumnCount int64 `protobuf:"varint,7,opt,name=column_count,json=columnCount,proto3" json:"column_count,omitempty"`
	// Output only. Input configs via which data currently residing in the table
	// had been imported.
	InputConfigs []*InputConfig `protobuf:"bytes,5,rep,name=input_configs,json=inputConfigs,proto3" json:"input_configs,omitempty"`
	// Used to perform consistent read-modify-write updates. If not set, a blind
	// "overwrite" update happens.
	Etag                 string   `protobuf:"bytes,6,opt,name=etag,proto3" json:"etag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TableSpec) Reset()         { *m = TableSpec{} }
func (m *TableSpec) String() string { return proto.CompactTextString(m) }
func (*TableSpec) ProtoMessage()    {}
func (*TableSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_67819f165062ce17, []int{0}
}

func (m *TableSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TableSpec.Unmarshal(m, b)
}
func (m *TableSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TableSpec.Marshal(b, m, deterministic)
}
func (m *TableSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableSpec.Merge(m, src)
}
func (m *TableSpec) XXX_Size() int {
	return xxx_messageInfo_TableSpec.Size(m)
}
func (m *TableSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TableSpec.DiscardUnknown(m)
}

var xxx_messageInfo_TableSpec proto.InternalMessageInfo

func (m *TableSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TableSpec) GetTimeColumnSpecId() string {
	if m != nil {
		return m.TimeColumnSpecId
	}
	return ""
}

func (m *TableSpec) GetRowCount() int64 {
	if m != nil {
		return m.RowCount
	}
	return 0
}

func (m *TableSpec) GetColumnCount() int64 {
	if m != nil {
		return m.ColumnCount
	}
	return 0
}

func (m *TableSpec) GetInputConfigs() []*InputConfig {
	if m != nil {
		return m.InputConfigs
	}
	return nil
}

func (m *TableSpec) GetEtag() string {
	if m != nil {
		return m.Etag
	}
	return ""
}

func init() {
	proto.RegisterType((*TableSpec)(nil), "google.cloud.automl.v1beta1.TableSpec")
}

func init() {
	proto.RegisterFile("google/cloud/automl/v1beta1/table_spec.proto", fileDescriptor_67819f165062ce17)
}

var fileDescriptor_67819f165062ce17 = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xc1, 0x4a, 0x33, 0x31,
	0x10, 0xc7, 0xd9, 0xf6, 0xfb, 0xaa, 0x4d, 0x2b, 0xc8, 0x7a, 0x59, 0x5a, 0xd1, 0x2a, 0x1e, 0xf6,
	0xa0, 0x09, 0xd5, 0xdb, 0x7a, 0xaa, 0x7b, 0x90, 0x82, 0x05, 0xa9, 0xe2, 0x41, 0x0a, 0x4b, 0x9a,
	0xc6, 0x10, 0xc8, 0x66, 0x96, 0xdd, 0xc4, 0x3e, 0x91, 0x2f, 0xe3, 0xa3, 0x78, 0xf3, 0x0d, 0x24,
	0xc9, 0x82, 0x17, 0xe9, 0x2d, 0xb3, 0xbf, 0xdf, 0xfc, 0x67, 0x67, 0xd0, 0xa5, 0x00, 0x10, 0x8a,
	0x13, 0xa6, 0xc0, 0x6e, 0x08, 0xb5, 0x06, 0x4a, 0x45, 0xde, 0xa7, 0x6b, 0x6e, 0xe8, 0x94, 0x18,
	0xba, 0x56, 0xbc, 0x68, 0x2a, 0xce, 0x70, 0x55, 0x83, 0x81, 0x78, 0x1c, 0x6c, 0xec, 0x6d, 0x1c,
	0x6c, 0xdc, 0xda, 0xa3, 0x8b, 0x5d, 0x51, 0x12, 0x42, 0xc4, 0xe8, 0xb8, 0xb5, 0x68, 0x25, 0x09,
	0xd5, 0x1a, 0x0c, 0x35, 0x12, 0x74, 0x13, 0xe8, 0xf9, 0x77, 0x84, 0xfa, 0xcf, 0x6e, 0xea, 0x53,
	0xc5, 0x59, 0x1c, 0xa3, 0x7f, 0x9a, 0x96, 0x3c, 0x89, 0x26, 0x51, 0xda, 0x5f, 0xfa, 0x77, 0x7c,
	0x85, 0x8e, 0x8c, 0x2c, 0x79, 0xc1, 0x40, 0xd9, 0x52, 0xfb, 0x9f, 0x2b, 0xe4, 0x26, 0xe9, 0x78,
	0xe5, 0xd0, 0xa1, 0xdc, 0x13, 0x17, 0x30, 0xdf, 0xc4, 0x63, 0xd4, 0xaf, 0x61, 0x5b, 0x30, 0xb0,
	0xda, 0x24, 0xdd, 0x49, 0x94, 0x76, 0x97, 0xfb, 0x35, 0x6c, 0x73, 0x57, 0xc7, 0x67, 0x68, 0xd8,
	0xc6, 0x04, 0xbe, 0xe7, 0xf9, 0x20, 0x7c, 0x0b, 0xca, 0x02, 0x1d, 0x48, 0x5d, 0x59, 0x53, 0x30,
	0xd0, 0x6f, 0x52, 0x34, 0xc9, 0xff, 0x49, 0x37, 0x1d, 0x5c, 0xa7, 0x78, 0xc7, 0x25, 0xf0, 0xdc,
	0x75, 0xe4, 0xbe, 0x61, 0x39, 0x94, 0xbf, 0x45, 0xe3, 0x36, 0xe2, 0x86, 0x8a, 0xa4, 0x17, 0x36,
	0x72, 0xef, 0xbb, 0x8f, 0x08, 0x9d, 0x32, 0x28, 0x77, 0x25, 0x3e, 0x46, 0xaf, 0xb3, 0x16, 0x0b,
	0x50, 0x54, 0x0b, 0x0c, 0xb5, 0x20, 0x82, 0x6b, 0x7f, 0x35, 0x12, 0x10, 0xad, 0x64, 0xf3, 0xe7,
	0xf1, 0x6f, 0x43, 0xf9, 0xd9, 0x19, 0xdf, 0x7b, 0x71, 0x95, 0x3b, 0x69, 0x35, 0xb3, 0x06, 0x16,
	0x6a, 0xf5, 0x12, 0xa4, 0xaf, 0xce, 0x49, 0xa0, 0x59, 0xe6, 0x71, 0x96, 0x79, 0xfe, 0x90, 0x65,
	0xad, 0xb0, 0xee, 0xf9, 0x61, 0x37, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x20, 0x4b, 0xe8, 0x59,
	0x33, 0x02, 0x00, 0x00,
}
